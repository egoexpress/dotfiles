" $HOME/.vimrc"
" vim configuration

" don't be 100% vi compatible
set nocompatible

filetype off

"  Vundle {{{
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

" fuzzy file search
Plugin 'ctrlpvim/ctrlp.vim'

" git handling
Plugin 'tpope/vim-fugitive'
" fast file navigation with \t
"Plugin 'git://git.wincent.com/command-t.git'
" vim/tmux seamless navigation
Bundle 'christoomey/vim-tmux-navigator'       
" advanced completion
"Plugin 'Valloric/YouCompleteMe'
" python linting/breakpoints/running
Plugin 'klen/python-mode'
" advanced snippts
"Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
" sneak motion
Plugin 'justinmk/vim-sneak'
" tag overview
Plugin 'majutsushi/tagbar'
" advanced commenting
Plugin 'scrooloose/nerdcommenter'
" surrounding
Plugin 'tpope/vim-surround'

" additional colorschemes
Plugin 'flazz/vim-colorschemes'

" statusline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'tpope/vim-pathogen'

Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-repeat'
call vundle#end() 
" }}}

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" indent width
set tabstop=2
set shiftwidth=2 " used for >>

" auto write on :make (and others)
set autowrite

" don't create backup files
set nobackup

" don't create backup on overwrite
set nowritebackup

" always show current mode in status line
set showmode

" show report when lines have changed (0 - always show report)
set report=0

" backspace
set backspace=2

" disable beep on error
set noerrorbells

" don't start in insert mode
set noinsertmode

" always show status line
set laststatus=2

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50    " keep 50 lines of command line history
set ruler   " show the cursor position all the time
set showcmd   " display incomplete commands
set incsearch   " do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp
"

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent    " always set autoindenting on

endif " has("autocmd")

set mouse=a

" select position when using mouse popup
set mousemodel=popup_setpos


set foldmethod=marker

set expandtab
set softtabstop=2

" These lines setup the environment to show graphics and colors correctly.
set t_Co=256
 
let g:minBufExplForceSyntaxEnable = 1
 
if ! has('gui_running')
   set ttimeoutlen=10
   augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
   augroup END
endif
 
" always display statusline
set laststatus=2

" hide modeline below statusline
set noshowmode

" disable creation of persistent undo files in vim >= 7.3
if v:version >= 703
  set noundofile
endif

" easier split movement
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" sane split creation
set splitbelow
set splitright

let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1

"will put icons in Vim's gutter on lines that have a diagnostic set.
""Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
"let g:ycm_enable_diagnostic_signs = 1
"let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1


let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''

let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info


"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 1

let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = '<C-Space>'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" clever-s feature for sneak
let g:sneak#s_next=1

" clear search with C-c
nnoremap <silent> <C-c> :<C-u>nohlsearch<CR>

"Root permission on a file inside VIM
cmap w!! w !sudo tee >/dev/null %

"CtrlP plugin
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" expand behaviour like in shell
set wildmode=longest,list

" use solarized colorscheme (with transparent terminal background)
set background=dark
let g:solarized_termtrans=1
let g:solarized_degrade=1
colorscheme solarized

set shortmess=a
set cmdheight=2

let g:airline_theme='distinguished'
